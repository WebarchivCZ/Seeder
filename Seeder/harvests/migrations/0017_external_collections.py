# Generated by Django 2.2.20 on 2021-08-05 10:31

import autoslug.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


def create_external_migrations(apps, schema_editor):
    # Retrieve the old TopicCollection and newly created ExternalTopicCollection
    TopicCollection = apps.get_model(
        'harvests', 'TopicCollection')
    ExternalTopicCollection = apps.get_model(
        'harvests', 'ExternalTopicCollection')
    # For each internal collection, create a 1:1 ExternalTopicCollection with
    # all the presentation data that will get deleted in the next operation
    for internal_tc in TopicCollection.objects.all():
        external_tc = ExternalTopicCollection.objects.create(
            order=internal_tc.order,
            active=internal_tc.active,
            created=internal_tc.created,
            title=internal_tc.title,
            title_cs=internal_tc.title_cs,
            title_en=internal_tc.title_en,
            slug=internal_tc.slug,
            annotation=internal_tc.annotation,
            annotation_cs=internal_tc.annotation_cs,
            annotation_en=internal_tc.annotation_en,
            image=internal_tc.image,
            owner=internal_tc.owner,
        )
        external_tc.keywords.set(internal_tc.keywords.all())
        internal_tc.external_collection = external_tc
        internal_tc.save()


def revert_external_migrations(apps, schema_editor):
    # Retrieve the old TopicCollection and newly created ExternalTopicCollection
    TopicCollection = apps.get_model(
        'harvests', 'TopicCollection')
    # Go through Internal TCs which should now have reference to a External TC
    for internal_tc in TopicCollection.objects.all():
        external_tc = internal_tc.external_collection
        # Don't change non-deleted fields: owner, title, created, active
        internal_tc.order = external_tc.order
        internal_tc.annotation = external_tc.annotation
        internal_tc.annotation_cs = external_tc.annotation_cs
        internal_tc.annotation_en = external_tc.annotation_en
        internal_tc.slug = external_tc.slug
        internal_tc.image = external_tc.image
        internal_tc.keywords.set(external_tc.keywords.all())
        # And save
        internal_tc.save()


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('source', '0005_seed_main_seed'),
        ('harvests', '0016_auto_20210803_0835'),
    ]

    operations = [
        migrations.CreateModel(
            name='ExternalTopicCollection',
            fields=[
                ('id', models.AutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(
                    db_index=True, editable=False, verbose_name='order')),
                ('active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(
                    default=django.utils.timezone.now, editable=False)),
                ('last_changed', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('title_cs', models.CharField(
                    max_length=255, null=True, verbose_name='title')),
                ('title_en', models.CharField(
                    max_length=255, null=True, verbose_name='title')),
                ('slug', autoslug.fields.AutoSlugField(
                    editable=False, populate_from='title_cs', unique=True)),
                ('annotation', models.TextField(verbose_name='annotation')),
                ('annotation_cs', models.TextField(
                    null=True, verbose_name='annotation')),
                ('annotation_en', models.TextField(
                    null=True, verbose_name='annotation')),
                ('image', models.ImageField(blank=True, null=True,
                 upload_to='photos', verbose_name='image')),
                ('keywords', models.ManyToManyField(
                    to='source.KeyWord', verbose_name='keywords')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT,
                 to=settings.AUTH_USER_MODEL, verbose_name='Curator')),
            ],
            options={
                'verbose_name': 'External Topic Collection',
                'verbose_name_plural': 'External Topic Collections',
                'ordering': ('order',),
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='topiccollection',
            name='external_collection',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='internal_collections', related_query_name='internal_collection', to='harvests.ExternalTopicCollection'),
        ),
        migrations.AlterModelOptions(
            name='topiccollection',
            options={'ordering': ('-last_changed',), 'verbose_name': 'Internal Topic Collection',
                     'verbose_name_plural': 'Internal Topic Collections'},
        ),
        # Change slug, order, annotation to nullable so I can revert migration
        migrations.AlterField(
            model_name='topiccollection',
            name='slug',
            field=autoslug.fields.AutoSlugField(
                editable=False, populate_from='title_cs', unique=True, null=True, blank=True),
        ),
        migrations.AlterField(
            model_name='topiccollection',
            name='order',
            field=models.PositiveIntegerField(
                db_index=True, editable=False, verbose_name='order', null=True, blank=True),
        ),

        #! Create 1.1 external migrations before fields get deleted
        migrations.RunPython(create_external_migrations,
                             revert_external_migrations),
        #! ========================================================

        migrations.RemoveField(
            model_name='topiccollection',
            name='image',
        ),
        migrations.RemoveField(
            model_name='topiccollection',
            name='keywords',
        ),
        migrations.RemoveField(
            model_name='topiccollection',
            name='order',
        ),
        migrations.RemoveField(
            model_name='topiccollection',
            name='slug',
        ),
    ]
